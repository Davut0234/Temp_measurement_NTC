
Panelmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000ab8  00000b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010a  0080010a  00000b56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001000  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adc  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f1  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00002fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000688  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000782  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000401a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include <avr/io.h>
#include "adc.h"

void adc_init(void)
{
	ADMUX = 0XC0;
  a6:	80 ec       	ldi	r24, 0xC0	; 192
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADPS2) | (1 << ADEN);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 68       	ori	r24, 0x84	; 132
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <adc_read>:
}

uint16_t adc_read(uint8_t ch)
{
	uint16_t result = 0;
	ADMUX &= 0xF0;
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	90 83       	st	Z, r25
	ADMUX |= ch;
  c2:	90 81       	ld	r25, Z
  c4:	89 2b       	or	r24, r25
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
	while(!(ADCSRA & (1 << ADIF)));
  d2:	80 81       	ld	r24, Z
  d4:	84 ff       	sbrs	r24, 4
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <adc_read+0x1a>
	result = ADCL;
  d8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	result += (ADCH << 8);
  dc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	return result;
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	98 2f       	mov	r25, r24
  e4:	88 27       	eor	r24, r24
  e6:	82 0f       	add	r24, r18
  e8:	91 1d       	adc	r25, r1
  ea:	08 95       	ret

000000ec <main>:
#define LED_PORT		PORTB


int main(void)
{
    LED_DDR |= (1 << LED_PIN);
  ec:	20 9a       	sbi	0x04, 0	; 4
	timer_init();
  ee:	0e 94 b7 01 	call	0x36e	; 0x36e <timer_init>
	spi_init();
  f2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <spi_init>
	max7219_init();
  f6:	0e 94 4f 01 	call	0x29e	; 0x29e <max7219_init>
	adc_init();
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	uart_init(9600);
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	95 e2       	ldi	r25, 0x25	; 37
 102:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <uart_init>
    {
		static uint32_t led_time; // timer tick ile ayný birimde olmalý
		
		if(TIMER_CHECK_COUNTER(led_time,SEC(1)))
		{
			LED_PORT ^= (1 << LED_PIN);
 106:	c1 e0       	ldi	r28, 0x01	; 1
	
    while (1) 
    {
		static uint32_t led_time; // timer tick ile ayný birimde olmalý
		
		if(TIMER_CHECK_COUNTER(led_time,SEC(1)))
 108:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <timer_get_count>
 10c:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <__data_end>
 110:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <__data_end+0x1>
 114:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end+0x2>
 118:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x3>
 11c:	dc 01       	movw	r26, r24
 11e:	cb 01       	movw	r24, r22
 120:	80 1b       	sub	r24, r16
 122:	91 0b       	sbc	r25, r17
 124:	a2 0b       	sbc	r26, r18
 126:	b3 0b       	sbc	r27, r19
 128:	88 3e       	cpi	r24, 0xE8	; 232
 12a:	93 40       	sbci	r25, 0x03	; 3
 12c:	a1 05       	cpc	r26, r1
 12e:	b1 05       	cpc	r27, r1
 130:	58 f3       	brcs	.-42     	; 0x108 <main+0x1c>
		{
			LED_PORT ^= (1 << LED_PIN);
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8c 27       	eor	r24, r28
 136:	85 b9       	out	0x05, r24	; 5
			led_time = TIMER_COUNTER; 
 138:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <timer_get_count>
 13c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 140:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 144:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 148:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
			uint16_t adc1 = adc_read(1);
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 5c 00 	call	0xb8	; 0xb8 <adc_read>
			max7219_write_number(0,adc1);
 154:	48 2f       	mov	r20, r24
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	cb 01       	movw	r24, r22
 15c:	0e 94 be 00 	call	0x17c	; 0x17c <max7219_write_number>
			max7219_update();
 160:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <max7219_update>
 164:	d1 cf       	rjmp	.-94     	; 0x108 <main+0x1c>

00000166 <max7219_write>:
	MAX7219_REG_ADDR_TEST = 0xF0,	// son elemanýn sonuna virgül koymak isteðe baðlý.
} max7219_address_t;					// typedef olduðunu belirtmek için sonuna '_t' koyduk.(zorunlu deðil)


void max7219_write(const max7219_address_t address, const uint8_t value)
{
 166:	cf 93       	push	r28
 168:	c6 2f       	mov	r28, r22
	SPI_CS_PORT &= ~(1 << SPI_CS_PIN); // Konuþmadan önce cs yi 0 a çektik.
 16a:	2a 98       	cbi	0x05, 2	; 5
	spi_transfer_byte(address);
 16c:	0e 94 8c 01 	call	0x318	; 0x318 <spi_transfer_byte>
	spi_transfer_byte(value);			// Adres ve yazmak istediðimiz deðeri girdik.
 170:	8c 2f       	mov	r24, r28
 172:	0e 94 8c 01 	call	0x318	; 0x318 <spi_transfer_byte>
	SPI_CS_PORT |= (1 << 2);			// Ýletim için cs yi 1 yaptýk.
 176:	2a 9a       	sbi	0x05, 2	; 5
}
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <max7219_write_number>:

void max7219_write_number(uint32_t number, uint8_t pos) // ekran 6 basamaklý olduðu için 32 bitlik deðiþken seçildi.
{
 17c:	2f 92       	push	r2
 17e:	3f 92       	push	r3
 180:	6f 92       	push	r6
 182:	7f 92       	push	r7
 184:	8f 92       	push	r8
 186:	9f 92       	push	r9
 188:	af 92       	push	r10
 18a:	bf 92       	push	r11
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <max7219_write_number+0x22>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <max7219_write_number+0x24>
 1a0:	1f 92       	push	r1
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	6a 83       	std	Y+2, r22	; 0x02
 1a8:	7b 83       	std	Y+3, r23	; 0x03
 1aa:	8c 83       	std	Y+4, r24	; 0x04
 1ac:	9d 83       	std	Y+5, r25	; 0x05
	uint32_t temp = number;
	volatile uint8_t digit_count = 0;
 1ae:	19 82       	std	Y+1, r1	; 0x01
	uint32_t divider = 1;
	
	while((temp != 0) && (pos + digit_count < MAX7219_DIG_COUNT))
 1b0:	dc 01       	movw	r26, r24
 1b2:	cb 01       	movw	r24, r22
 1b4:	89 2b       	or	r24, r25
 1b6:	8a 2b       	or	r24, r26
 1b8:	8b 2b       	or	r24, r27
 1ba:	09 f4       	brne	.+2      	; 0x1be <max7219_write_number+0x42>
 1bc:	5a c0       	rjmp	.+180    	; 0x272 <max7219_write_number+0xf6>
 1be:	24 2e       	mov	r2, r20
 1c0:	31 2c       	mov	r3, r1
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	d1 01       	movw	r26, r2
 1c6:	a8 0f       	add	r26, r24
 1c8:	b1 1d       	adc	r27, r1
 1ca:	16 97       	sbiw	r26, 0x06	; 6
 1cc:	0c f0       	brlt	.+2      	; 0x1d0 <max7219_write_number+0x54>
 1ce:	51 c0       	rjmp	.+162    	; 0x272 <max7219_write_number+0xf6>
 1d0:	8a 80       	ldd	r8, Y+2	; 0x02
 1d2:	9b 80       	ldd	r9, Y+3	; 0x03
 1d4:	ac 80       	ldd	r10, Y+4	; 0x04
 1d6:	bd 80       	ldd	r11, Y+5	; 0x05
 1d8:	c1 2c       	mov	r12, r1
 1da:	d1 2c       	mov	r13, r1
 1dc:	76 01       	movw	r14, r12
 1de:	c3 94       	inc	r12
	{
		temp /= 10;
		buffer[digit_count + pos] = numbers[(number/divider) % 10];
 1e0:	f1 01       	movw	r30, r2
 1e2:	ee 5e       	subi	r30, 0xEE	; 238
 1e4:	fe 4f       	sbci	r31, 0xFE	; 254
 1e6:	3f 01       	movw	r6, r30
	volatile uint8_t digit_count = 0;
	uint32_t divider = 1;
	
	while((temp != 0) && (pos + digit_count < MAX7219_DIG_COUNT))
	{
		temp /= 10;
 1e8:	c5 01       	movw	r24, r10
 1ea:	b4 01       	movw	r22, r8
 1ec:	2a e0       	ldi	r18, 0x0A	; 10
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	0e 94 38 05 	call	0xa70	; 0xa70 <__udivmodsi4>
 1f8:	49 01       	movw	r8, r18
 1fa:	5a 01       	movw	r10, r20
		buffer[digit_count + pos] = numbers[(number/divider) % 10];
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	83 01       	movw	r16, r6
 200:	08 0f       	add	r16, r24
 202:	11 1d       	adc	r17, r1
 204:	6a 81       	ldd	r22, Y+2	; 0x02
 206:	7b 81       	ldd	r23, Y+3	; 0x03
 208:	8c 81       	ldd	r24, Y+4	; 0x04
 20a:	9d 81       	ldd	r25, Y+5	; 0x05
 20c:	a7 01       	movw	r20, r14
 20e:	96 01       	movw	r18, r12
 210:	0e 94 38 05 	call	0xa70	; 0xa70 <__udivmodsi4>
 214:	ca 01       	movw	r24, r20
 216:	b9 01       	movw	r22, r18
 218:	2a e0       	ldi	r18, 0x0A	; 10
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0e 94 38 05 	call	0xa70	; 0xa70 <__udivmodsi4>
 224:	fb 01       	movw	r30, r22
 226:	e0 50       	subi	r30, 0x00	; 0
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	80 81       	ld	r24, Z
 22c:	d8 01       	movw	r26, r16
 22e:	8c 93       	st	X, r24
		digit_count++;
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	89 83       	std	Y+1, r24	; 0x01
		divider*=10;
 236:	cc 0c       	add	r12, r12
 238:	dd 1c       	adc	r13, r13
 23a:	ee 1c       	adc	r14, r14
 23c:	ff 1c       	adc	r15, r15
 23e:	d7 01       	movw	r26, r14
 240:	c6 01       	movw	r24, r12
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	aa 1f       	adc	r26, r26
 248:	bb 1f       	adc	r27, r27
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	aa 1f       	adc	r26, r26
 250:	bb 1f       	adc	r27, r27
 252:	c8 0e       	add	r12, r24
 254:	d9 1e       	adc	r13, r25
 256:	ea 1e       	adc	r14, r26
 258:	fb 1e       	adc	r15, r27
{
	uint32_t temp = number;
	volatile uint8_t digit_count = 0;
	uint32_t divider = 1;
	
	while((temp != 0) && (pos + digit_count < MAX7219_DIG_COUNT))
 25a:	81 14       	cp	r8, r1
 25c:	91 04       	cpc	r9, r1
 25e:	a1 04       	cpc	r10, r1
 260:	b1 04       	cpc	r11, r1
 262:	39 f0       	breq	.+14     	; 0x272 <max7219_write_number+0xf6>
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	f1 01       	movw	r30, r2
 268:	e8 0f       	add	r30, r24
 26a:	f1 1d       	adc	r31, r1
 26c:	36 97       	sbiw	r30, 0x06	; 6
 26e:	0c f4       	brge	.+2      	; 0x272 <max7219_write_number+0xf6>
 270:	bb cf       	rjmp	.-138    	; 0x1e8 <max7219_write_number+0x6c>
		temp /= 10;
		buffer[digit_count + pos] = numbers[(number/divider) % 10];
		digit_count++;
		divider*=10;
	}
}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	bf 90       	pop	r11
 28e:	af 90       	pop	r10
 290:	9f 90       	pop	r9
 292:	8f 90       	pop	r8
 294:	7f 90       	pop	r7
 296:	6f 90       	pop	r6
 298:	3f 90       	pop	r3
 29a:	2f 90       	pop	r2
 29c:	08 95       	ret

0000029e <max7219_init>:

void max7219_init(void)
{
	SPI_CS_DDR |= (1 << SPI_CS_PIN);
 29e:	22 9a       	sbi	0x04, 2	; 4
	SPI_CS_PORT |= (1 << SPI_CS_PIN);
 2a0:	2a 9a       	sbi	0x05, 2	; 5
	
	max7219_write(MAX7219_REG_ADDR_DECODE_MODE , 0x00);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	89 e0       	ldi	r24, 0x09	; 9
 2a6:	0e 94 b3 00 	call	0x166	; 0x166 <max7219_write>
	max7219_write(MAX7219_REG_ADDR_INTENSITY , 0x0F);
 2aa:	6f e0       	ldi	r22, 0x0F	; 15
 2ac:	8a e0       	ldi	r24, 0x0A	; 10
 2ae:	0e 94 b3 00 	call	0x166	; 0x166 <max7219_write>
	max7219_write(MAX7219_REG_ADDR_SCAN_LIM , 0x05);
 2b2:	65 e0       	ldi	r22, 0x05	; 5
 2b4:	8b e0       	ldi	r24, 0x0B	; 11
 2b6:	0e 94 b3 00 	call	0x166	; 0x166 <max7219_write>
	max7219_write(MAX7219_REG_ADDR_SHUTDOWN , 0x01); //max7219_write(0x0C , 0x01); daha okunaklý hale geldi.
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	8c e0       	ldi	r24, 0x0C	; 12
 2be:	0e 94 b3 00 	call	0x166	; 0x166 <max7219_write>
	max7219_write(MAX7219_REG_ADDR_TEST , 0x00);  
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	80 ef       	ldi	r24, 0xF0	; 240
 2c6:	0e 94 b3 00 	call	0x166	; 0x166 <max7219_write>
	
	//max7219_write(0x05 , 2);
	max7219_write(MAX7219_REG_ADDR_DIG4 , numbers[2]); // enum yapýsý sayesinde daha okunaklý þekle çevirdik.
 2ca:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	0e 94 b3 00 	call	0x166	; 0x166 <max7219_write>
 2d4:	08 95       	ret

000002d6 <max7219_update>:
}

void max7219_update(void)
{
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	02 e1       	ldi	r16, 0x12	; 18
 2de:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t i;
	for(i = 0 ; i < MAX7219_DIG_COUNT ; i++ )
 2e0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		max7219_write((max7219_address_t)(i + 1), buffer[i]);
 2e2:	f8 01       	movw	r30, r16
 2e4:	61 91       	ld	r22, Z+
 2e6:	8f 01       	movw	r16, r30
 2e8:	cf 5f       	subi	r28, 0xFF	; 255
 2ea:	8c 2f       	mov	r24, r28
 2ec:	0e 94 b3 00 	call	0x166	; 0x166 <max7219_write>
}

void max7219_update(void)
{
	uint8_t i;
	for(i = 0 ; i < MAX7219_DIG_COUNT ; i++ )
 2f0:	c6 30       	cpi	r28, 0x06	; 6
 2f2:	b9 f7       	brne	.-18     	; 0x2e2 <max7219_update+0xc>
	{
		max7219_write((max7219_address_t)(i + 1), buffer[i]);
	}
}
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	08 95       	ret

000002fc <spi_init>:
#define SPI_SCK_PIN		(5)
#define SPI_CS_PIN		(2)

void spi_init(void)
{
	SPI_DDR_PORT |= (1 << SPI_MOSI_PIN);
 2fc:	23 9a       	sbi	0x04, 3	; 4
	SPI_DDR_PORT |= (1 << SPI_SCK_PIN);
 2fe:	25 9a       	sbi	0x04, 5	; 4
	SPI_DDR_PORT |= (1 << SPI_CS_PIN);
 300:	22 9a       	sbi	0x04, 2	; 4
	SPI_DDR_PORT &= ~(1 << SPI_MISO_PIN);
 302:	24 98       	cbi	0x04, 4	; 4
	
	SPCR |= ((1 << SPR1) | (1 << SPR0));
 304:	8c b5       	in	r24, 0x2c	; 44
 306:	83 60       	ori	r24, 0x03	; 3
 308:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << MSTR);
 30a:	8c b5       	in	r24, 0x2c	; 44
 30c:	80 61       	ori	r24, 0x10	; 16
 30e:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPE);
 310:	8c b5       	in	r24, 0x2c	; 44
 312:	80 64       	ori	r24, 0x40	; 64
 314:	8c bd       	out	0x2c, r24	; 44
 316:	08 95       	ret

00000318 <spi_transfer_byte>:
	
}

uint8_t spi_transfer_byte(const uint8_t value)
{
	SPDR = value;
 318:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
 31a:	0d b4       	in	r0, 0x2d	; 45
 31c:	07 fe       	sbrs	r0, 7
 31e:	fd cf       	rjmp	.-6      	; 0x31a <spi_transfer_byte+0x2>
	return SPDR;
 320:	8e b5       	in	r24, 0x2e	; 46
 322:	08 95       	ret

00000324 <__vector_14>:
#include "timer.h"

static volatile uint32_t timer_tick;

ISR(TIMER0_COMPA_vect)
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
	timer_tick++;
 336:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_tick>
 33a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer_tick+0x1>
 33e:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <timer_tick+0x2>
 342:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <timer_tick+0x3>
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	a1 1d       	adc	r26, r1
 34a:	b1 1d       	adc	r27, r1
 34c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timer_tick>
 350:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timer_tick+0x1>
 354:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timer_tick+0x2>
 358:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timer_tick+0x3>
}
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <timer_init>:



void timer_init(void)
{
	TCCR0A |= (1 << WGM01);
 36e:	84 b5       	in	r24, 0x24	; 36
 370:	82 60       	ori	r24, 0x02	; 2
 372:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249U;
 374:	89 ef       	ldi	r24, 0xF9	; 249
 376:	87 bd       	out	0x27, r24	; 39
	TIFR0 |= (1 << OCR0A);
 378:	37 b5       	in	r19, 0x27	; 39
 37a:	25 b3       	in	r18, 0x15	; 21
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <timer_init+0x18>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	3a 95       	dec	r19
 388:	e2 f7       	brpl	.-8      	; 0x382 <timer_init+0x14>
 38a:	82 2b       	or	r24, r18
 38c:	85 bb       	out	0x15, r24	; 21
	TIMSK0 |= (1 << OCIE0A);
 38e:	ee e6       	ldi	r30, 0x6E	; 110
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	82 60       	ori	r24, 0x02	; 2
 396:	80 83       	st	Z, r24
	TCCR0B |= (1 << CS01) | (1 << CS00);
 398:	85 b5       	in	r24, 0x25	; 37
 39a:	83 60       	ori	r24, 0x03	; 3
 39c:	85 bd       	out	0x25, r24	; 37
 39e:	08 95       	ret

000003a0 <timer_get_count>:

}

uint32_t timer_get_count(void)
{
	return timer_tick;
 3a0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <timer_tick>
 3a4:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <timer_tick+0x1>
 3a8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timer_tick+0x2>
 3ac:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <timer_tick+0x3>
 3b0:	08 95       	ret

000003b2 <uart_init>:
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = c;
}

void uart_init(uint32_t baudrate)
{
 3b2:	4f 92       	push	r4
 3b4:	5f 92       	push	r5
 3b6:	6f 92       	push	r6
 3b8:	7f 92       	push	r7
 3ba:	8f 92       	push	r8
 3bc:	9f 92       	push	r9
 3be:	af 92       	push	r10
 3c0:	bf 92       	push	r11
 3c2:	cf 92       	push	r12
 3c4:	df 92       	push	r13
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	2c 97       	sbiw	r28, 0x0c	; 12
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	cd bf       	out	0x3d, r28	; 61
 3de:	6b 01       	movw	r12, r22
 3e0:	7c 01       	movw	r14, r24
static uint16_t baudtoreg(uint32_t baud, uint8_t x2)
{
	uint8_t multipler = 8;
	if(!x2) (multipler *=2);
	
	return round(((F_CPU / (float)(multipler * baud)) -1 )); // DÜZELTT!!
 3e2:	4b 01       	movw	r8, r22
 3e4:	5c 01       	movw	r10, r24
 3e6:	88 0c       	add	r8, r8
 3e8:	99 1c       	adc	r9, r9
 3ea:	aa 1c       	adc	r10, r10
 3ec:	bb 1c       	adc	r11, r11
 3ee:	88 0c       	add	r8, r8
 3f0:	99 1c       	adc	r9, r9
 3f2:	aa 1c       	adc	r10, r10
 3f4:	bb 1c       	adc	r11, r11
 3f6:	88 0c       	add	r8, r8
 3f8:	99 1c       	adc	r9, r9
 3fa:	aa 1c       	adc	r10, r10
 3fc:	bb 1c       	adc	r11, r11
 3fe:	c5 01       	movw	r24, r10
 400:	b4 01       	movw	r22, r8
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	88 1f       	adc	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 40e:	9b 01       	movw	r18, r22
 410:	ac 01       	movw	r20, r24
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	74 e2       	ldi	r23, 0x24	; 36
 416:	84 e7       	ldi	r24, 0x74	; 116
 418:	9b e4       	ldi	r25, 0x4B	; 75
 41a:	0e 94 48 03 	call	0x690	; 0x690 <__divsf3>
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 e8       	ldi	r20, 0x80	; 128
 424:	5f e3       	ldi	r21, 0x3F	; 63
 426:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__subsf3>
 42a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <round>
 42e:	0e 94 c1 03 	call	0x782	; 0x782 <__fixunssfsi>
 432:	69 87       	std	Y+9, r22	; 0x09
 434:	7a 87       	std	Y+10, r23	; 0x0a
 436:	8b 87       	std	Y+11, r24	; 0x0b
 438:	9c 87       	std	Y+12, r25	; 0x0c
 43a:	c5 01       	movw	r24, r10
 43c:	b4 01       	movw	r22, r8
 43e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 442:	9b 01       	movw	r18, r22
 444:	ac 01       	movw	r20, r24
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	74 e2       	ldi	r23, 0x24	; 36
 44a:	84 e7       	ldi	r24, 0x74	; 116
 44c:	9b e4       	ldi	r25, 0x4B	; 75
 44e:	0e 94 48 03 	call	0x690	; 0x690 <__divsf3>
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	40 e8       	ldi	r20, 0x80	; 128
 458:	5f e3       	ldi	r21, 0x3F	; 63
 45a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__subsf3>
 45e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <round>
 462:	0e 94 c1 03 	call	0x782	; 0x782 <__fixunssfsi>
 466:	2b 01       	movw	r4, r22
 468:	3c 01       	movw	r6, r24
	volatile float error , error2x;
	
	baud_reg = baudtoreg(baudrate, 0);
	baud_reg2x = baudtoreg(baudrate,1);
	
	error = (((float)regtobaud(baud_reg,0) / baudrate) -1 )*100;
 46a:	c7 01       	movw	r24, r14
 46c:	b6 01       	movw	r22, r12
 46e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 472:	6b 01       	movw	r12, r22
 474:	7c 01       	movw	r14, r24
 476:	29 85       	ldd	r18, Y+9	; 0x09
 478:	3a 85       	ldd	r19, Y+10	; 0x0a
 47a:	2f 5f       	subi	r18, 0xFF	; 255
 47c:	3f 4f       	sbci	r19, 0xFF	; 255
 47e:	22 95       	swap	r18
 480:	32 95       	swap	r19
 482:	30 7f       	andi	r19, 0xF0	; 240
 484:	32 27       	eor	r19, r18
 486:	20 7f       	andi	r18, 0xF0	; 240
 488:	32 27       	eor	r19, r18
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	0f 2e       	mov	r0, r31
 490:	81 2c       	mov	r8, r1
 492:	f4 e2       	ldi	r31, 0x24	; 36
 494:	9f 2e       	mov	r9, r31
 496:	f4 ef       	ldi	r31, 0xF4	; 244
 498:	af 2e       	mov	r10, r31
 49a:	b1 2c       	mov	r11, r1
 49c:	f0 2d       	mov	r31, r0
 49e:	c5 01       	movw	r24, r10
 4a0:	b4 01       	movw	r22, r8
 4a2:	0e 94 38 05 	call	0xa70	; 0xa70 <__udivmodsi4>
 4a6:	ca 01       	movw	r24, r20
 4a8:	b9 01       	movw	r22, r18
 4aa:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 4ae:	a7 01       	movw	r20, r14
 4b0:	96 01       	movw	r18, r12
 4b2:	0e 94 48 03 	call	0x690	; 0x690 <__divsf3>
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	40 e8       	ldi	r20, 0x80	; 128
 4bc:	5f e3       	ldi	r21, 0x3F	; 63
 4be:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__subsf3>
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	48 ec       	ldi	r20, 0xC8	; 200
 4c8:	52 e4       	ldi	r21, 0x42	; 66
 4ca:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
 4ce:	69 83       	std	Y+1, r22	; 0x01
 4d0:	7a 83       	std	Y+2, r23	; 0x02
 4d2:	8b 83       	std	Y+3, r24	; 0x03
 4d4:	9c 83       	std	Y+4, r25	; 0x04
	error2x = (((float)regtobaud(baud_reg2x,0) / baudrate) -1 )*100;
 4d6:	92 01       	movw	r18, r4
 4d8:	2f 5f       	subi	r18, 0xFF	; 255
 4da:	3f 4f       	sbci	r19, 0xFF	; 255
 4dc:	22 95       	swap	r18
 4de:	32 95       	swap	r19
 4e0:	30 7f       	andi	r19, 0xF0	; 240
 4e2:	32 27       	eor	r19, r18
 4e4:	20 7f       	andi	r18, 0xF0	; 240
 4e6:	32 27       	eor	r19, r18
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	c5 01       	movw	r24, r10
 4ee:	b4 01       	movw	r22, r8
 4f0:	0e 94 38 05 	call	0xa70	; 0xa70 <__udivmodsi4>
 4f4:	ca 01       	movw	r24, r20
 4f6:	b9 01       	movw	r22, r18
 4f8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__floatunsisf>
 4fc:	a7 01       	movw	r20, r14
 4fe:	96 01       	movw	r18, r12
 500:	0e 94 48 03 	call	0x690	; 0x690 <__divsf3>
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	40 e8       	ldi	r20, 0x80	; 128
 50a:	5f e3       	ldi	r21, 0x3F	; 63
 50c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__subsf3>
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	48 ec       	ldi	r20, 0xC8	; 200
 516:	52 e4       	ldi	r21, 0x42	; 66
 518:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3>
 51c:	6d 83       	std	Y+5, r22	; 0x05
 51e:	7e 83       	std	Y+6, r23	; 0x06
 520:	8f 83       	std	Y+7, r24	; 0x07
 522:	98 87       	std	Y+8, r25	; 0x08
	
	if(abs(error) <= abs(error2x))
 524:	69 81       	ldd	r22, Y+1	; 0x01
 526:	7a 81       	ldd	r23, Y+2	; 0x02
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	9c 81       	ldd	r25, Y+4	; 0x04
 52c:	cd 80       	ldd	r12, Y+5	; 0x05
 52e:	de 80       	ldd	r13, Y+6	; 0x06
 530:	ef 80       	ldd	r14, Y+7	; 0x07
 532:	f8 84       	ldd	r15, Y+8	; 0x08
 534:	0e 94 ba 03 	call	0x774	; 0x774 <__fixsfsi>
 538:	5b 01       	movw	r10, r22
 53a:	77 23       	and	r23, r23
 53c:	24 f4       	brge	.+8      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 53e:	aa 24       	eor	r10, r10
 540:	bb 24       	eor	r11, r11
 542:	a6 1a       	sub	r10, r22
 544:	b7 0a       	sbc	r11, r23
 546:	c7 01       	movw	r24, r14
 548:	b6 01       	movw	r22, r12
 54a:	0e 94 ba 03 	call	0x774	; 0x774 <__fixsfsi>
 54e:	9b 01       	movw	r18, r22
 550:	77 23       	and	r23, r23
 552:	24 f4       	brge	.+8      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 554:	22 27       	eor	r18, r18
 556:	33 27       	eor	r19, r19
 558:	26 1b       	sub	r18, r22
 55a:	37 0b       	sbc	r19, r23
 55c:	2a 15       	cp	r18, r10
 55e:	3b 05       	cpc	r19, r11
 560:	3c f0       	brlt	.+14     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
	{
		UBRR0 = baud_reg;
 562:	89 85       	ldd	r24, Y+9	; 0x09
 564:	9a 85       	ldd	r25, Y+10	; 0x0a
 566:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 56a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 56e:	09 c0       	rjmp	.+18     	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
	}
	else
	{
		UCSR0A |= (1<< U2X0);
 570:	e0 ec       	ldi	r30, 0xC0	; 192
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	82 60       	ori	r24, 0x02	; 2
 578:	80 83       	st	Z, r24
		UBRR0 = baud_reg2x;
 57a:	50 92 c5 00 	sts	0x00C5, r5	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 57e:	40 92 c4 00 	sts	0x00C4, r4	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	}
	
	UCSR0B |= (1 << TXEN0);
 582:	e1 ec       	ldi	r30, 0xC1	; 193
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	88 60       	ori	r24, 0x08	; 8
 58a:	80 83       	st	Z, r24
}
 58c:	2c 96       	adiw	r28, 0x0c	; 12
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	ff 90       	pop	r15
 59e:	ef 90       	pop	r14
 5a0:	df 90       	pop	r13
 5a2:	cf 90       	pop	r12
 5a4:	bf 90       	pop	r11
 5a6:	af 90       	pop	r10
 5a8:	9f 90       	pop	r9
 5aa:	8f 90       	pop	r8
 5ac:	7f 90       	pop	r7
 5ae:	6f 90       	pop	r6
 5b0:	5f 90       	pop	r5
 5b2:	4f 90       	pop	r4
 5b4:	08 95       	ret

000005b6 <__subsf3>:
 5b6:	50 58       	subi	r21, 0x80	; 128

000005b8 <__addsf3>:
 5b8:	bb 27       	eor	r27, r27
 5ba:	aa 27       	eor	r26, r26
 5bc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__addsf3x>
 5c0:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_round>
 5c4:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscA>
 5c8:	38 f0       	brcs	.+14     	; 0x5d8 <__addsf3+0x20>
 5ca:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscB>
 5ce:	20 f0       	brcs	.+8      	; 0x5d8 <__addsf3+0x20>
 5d0:	39 f4       	brne	.+14     	; 0x5e0 <__addsf3+0x28>
 5d2:	9f 3f       	cpi	r25, 0xFF	; 255
 5d4:	19 f4       	brne	.+6      	; 0x5dc <__addsf3+0x24>
 5d6:	26 f4       	brtc	.+8      	; 0x5e0 <__addsf3+0x28>
 5d8:	0c 94 33 04 	jmp	0x866	; 0x866 <__fp_nan>
 5dc:	0e f4       	brtc	.+2      	; 0x5e0 <__addsf3+0x28>
 5de:	e0 95       	com	r30
 5e0:	e7 fb       	bst	r30, 7
 5e2:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_inf>

000005e6 <__addsf3x>:
 5e6:	e9 2f       	mov	r30, r25
 5e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_split3>
 5ec:	58 f3       	brcs	.-42     	; 0x5c4 <__addsf3+0xc>
 5ee:	ba 17       	cp	r27, r26
 5f0:	62 07       	cpc	r22, r18
 5f2:	73 07       	cpc	r23, r19
 5f4:	84 07       	cpc	r24, r20
 5f6:	95 07       	cpc	r25, r21
 5f8:	20 f0       	brcs	.+8      	; 0x602 <__addsf3x+0x1c>
 5fa:	79 f4       	brne	.+30     	; 0x61a <__addsf3x+0x34>
 5fc:	a6 f5       	brtc	.+104    	; 0x666 <__addsf3x+0x80>
 5fe:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_zero>
 602:	0e f4       	brtc	.+2      	; 0x606 <__addsf3x+0x20>
 604:	e0 95       	com	r30
 606:	0b 2e       	mov	r0, r27
 608:	ba 2f       	mov	r27, r26
 60a:	a0 2d       	mov	r26, r0
 60c:	0b 01       	movw	r0, r22
 60e:	b9 01       	movw	r22, r18
 610:	90 01       	movw	r18, r0
 612:	0c 01       	movw	r0, r24
 614:	ca 01       	movw	r24, r20
 616:	a0 01       	movw	r20, r0
 618:	11 24       	eor	r1, r1
 61a:	ff 27       	eor	r31, r31
 61c:	59 1b       	sub	r21, r25
 61e:	99 f0       	breq	.+38     	; 0x646 <__addsf3x+0x60>
 620:	59 3f       	cpi	r21, 0xF9	; 249
 622:	50 f4       	brcc	.+20     	; 0x638 <__addsf3x+0x52>
 624:	50 3e       	cpi	r21, 0xE0	; 224
 626:	68 f1       	brcs	.+90     	; 0x682 <__addsf3x+0x9c>
 628:	1a 16       	cp	r1, r26
 62a:	f0 40       	sbci	r31, 0x00	; 0
 62c:	a2 2f       	mov	r26, r18
 62e:	23 2f       	mov	r18, r19
 630:	34 2f       	mov	r19, r20
 632:	44 27       	eor	r20, r20
 634:	58 5f       	subi	r21, 0xF8	; 248
 636:	f3 cf       	rjmp	.-26     	; 0x61e <__addsf3x+0x38>
 638:	46 95       	lsr	r20
 63a:	37 95       	ror	r19
 63c:	27 95       	ror	r18
 63e:	a7 95       	ror	r26
 640:	f0 40       	sbci	r31, 0x00	; 0
 642:	53 95       	inc	r21
 644:	c9 f7       	brne	.-14     	; 0x638 <__addsf3x+0x52>
 646:	7e f4       	brtc	.+30     	; 0x666 <__addsf3x+0x80>
 648:	1f 16       	cp	r1, r31
 64a:	ba 0b       	sbc	r27, r26
 64c:	62 0b       	sbc	r22, r18
 64e:	73 0b       	sbc	r23, r19
 650:	84 0b       	sbc	r24, r20
 652:	ba f0       	brmi	.+46     	; 0x682 <__addsf3x+0x9c>
 654:	91 50       	subi	r25, 0x01	; 1
 656:	a1 f0       	breq	.+40     	; 0x680 <__addsf3x+0x9a>
 658:	ff 0f       	add	r31, r31
 65a:	bb 1f       	adc	r27, r27
 65c:	66 1f       	adc	r22, r22
 65e:	77 1f       	adc	r23, r23
 660:	88 1f       	adc	r24, r24
 662:	c2 f7       	brpl	.-16     	; 0x654 <__addsf3x+0x6e>
 664:	0e c0       	rjmp	.+28     	; 0x682 <__addsf3x+0x9c>
 666:	ba 0f       	add	r27, r26
 668:	62 1f       	adc	r22, r18
 66a:	73 1f       	adc	r23, r19
 66c:	84 1f       	adc	r24, r20
 66e:	48 f4       	brcc	.+18     	; 0x682 <__addsf3x+0x9c>
 670:	87 95       	ror	r24
 672:	77 95       	ror	r23
 674:	67 95       	ror	r22
 676:	b7 95       	ror	r27
 678:	f7 95       	ror	r31
 67a:	9e 3f       	cpi	r25, 0xFE	; 254
 67c:	08 f0       	brcs	.+2      	; 0x680 <__addsf3x+0x9a>
 67e:	b0 cf       	rjmp	.-160    	; 0x5e0 <__addsf3+0x28>
 680:	93 95       	inc	r25
 682:	88 0f       	add	r24, r24
 684:	08 f0       	brcs	.+2      	; 0x688 <__addsf3x+0xa2>
 686:	99 27       	eor	r25, r25
 688:	ee 0f       	add	r30, r30
 68a:	97 95       	ror	r25
 68c:	87 95       	ror	r24
 68e:	08 95       	ret

00000690 <__divsf3>:
 690:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__divsf3x>
 694:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_round>
 698:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscB>
 69c:	58 f0       	brcs	.+22     	; 0x6b4 <__divsf3+0x24>
 69e:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscA>
 6a2:	40 f0       	brcs	.+16     	; 0x6b4 <__divsf3+0x24>
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <__divsf3+0x20>
 6a6:	5f 3f       	cpi	r21, 0xFF	; 255
 6a8:	29 f0       	breq	.+10     	; 0x6b4 <__divsf3+0x24>
 6aa:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_inf>
 6ae:	51 11       	cpse	r21, r1
 6b0:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_szero>
 6b4:	0c 94 33 04 	jmp	0x866	; 0x866 <__fp_nan>

000006b8 <__divsf3x>:
 6b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_split3>
 6bc:	68 f3       	brcs	.-38     	; 0x698 <__divsf3+0x8>

000006be <__divsf3_pse>:
 6be:	99 23       	and	r25, r25
 6c0:	b1 f3       	breq	.-20     	; 0x6ae <__divsf3+0x1e>
 6c2:	55 23       	and	r21, r21
 6c4:	91 f3       	breq	.-28     	; 0x6aa <__divsf3+0x1a>
 6c6:	95 1b       	sub	r25, r21
 6c8:	55 0b       	sbc	r21, r21
 6ca:	bb 27       	eor	r27, r27
 6cc:	aa 27       	eor	r26, r26
 6ce:	62 17       	cp	r22, r18
 6d0:	73 07       	cpc	r23, r19
 6d2:	84 07       	cpc	r24, r20
 6d4:	38 f0       	brcs	.+14     	; 0x6e4 <__divsf3_pse+0x26>
 6d6:	9f 5f       	subi	r25, 0xFF	; 255
 6d8:	5f 4f       	sbci	r21, 0xFF	; 255
 6da:	22 0f       	add	r18, r18
 6dc:	33 1f       	adc	r19, r19
 6de:	44 1f       	adc	r20, r20
 6e0:	aa 1f       	adc	r26, r26
 6e2:	a9 f3       	breq	.-22     	; 0x6ce <__divsf3_pse+0x10>
 6e4:	35 d0       	rcall	.+106    	; 0x750 <__divsf3_pse+0x92>
 6e6:	0e 2e       	mov	r0, r30
 6e8:	3a f0       	brmi	.+14     	; 0x6f8 <__divsf3_pse+0x3a>
 6ea:	e0 e8       	ldi	r30, 0x80	; 128
 6ec:	32 d0       	rcall	.+100    	; 0x752 <__divsf3_pse+0x94>
 6ee:	91 50       	subi	r25, 0x01	; 1
 6f0:	50 40       	sbci	r21, 0x00	; 0
 6f2:	e6 95       	lsr	r30
 6f4:	00 1c       	adc	r0, r0
 6f6:	ca f7       	brpl	.-14     	; 0x6ea <__divsf3_pse+0x2c>
 6f8:	2b d0       	rcall	.+86     	; 0x750 <__divsf3_pse+0x92>
 6fa:	fe 2f       	mov	r31, r30
 6fc:	29 d0       	rcall	.+82     	; 0x750 <__divsf3_pse+0x92>
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	bb 1f       	adc	r27, r27
 706:	26 17       	cp	r18, r22
 708:	37 07       	cpc	r19, r23
 70a:	48 07       	cpc	r20, r24
 70c:	ab 07       	cpc	r26, r27
 70e:	b0 e8       	ldi	r27, 0x80	; 128
 710:	09 f0       	breq	.+2      	; 0x714 <__divsf3_pse+0x56>
 712:	bb 0b       	sbc	r27, r27
 714:	80 2d       	mov	r24, r0
 716:	bf 01       	movw	r22, r30
 718:	ff 27       	eor	r31, r31
 71a:	93 58       	subi	r25, 0x83	; 131
 71c:	5f 4f       	sbci	r21, 0xFF	; 255
 71e:	3a f0       	brmi	.+14     	; 0x72e <__divsf3_pse+0x70>
 720:	9e 3f       	cpi	r25, 0xFE	; 254
 722:	51 05       	cpc	r21, r1
 724:	78 f0       	brcs	.+30     	; 0x744 <__divsf3_pse+0x86>
 726:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_inf>
 72a:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_szero>
 72e:	5f 3f       	cpi	r21, 0xFF	; 255
 730:	e4 f3       	brlt	.-8      	; 0x72a <__divsf3_pse+0x6c>
 732:	98 3e       	cpi	r25, 0xE8	; 232
 734:	d4 f3       	brlt	.-12     	; 0x72a <__divsf3_pse+0x6c>
 736:	86 95       	lsr	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	b7 95       	ror	r27
 73e:	f7 95       	ror	r31
 740:	9f 5f       	subi	r25, 0xFF	; 255
 742:	c9 f7       	brne	.-14     	; 0x736 <__divsf3_pse+0x78>
 744:	88 0f       	add	r24, r24
 746:	91 1d       	adc	r25, r1
 748:	96 95       	lsr	r25
 74a:	87 95       	ror	r24
 74c:	97 f9       	bld	r25, 7
 74e:	08 95       	ret
 750:	e1 e0       	ldi	r30, 0x01	; 1
 752:	66 0f       	add	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	bb 1f       	adc	r27, r27
 75a:	62 17       	cp	r22, r18
 75c:	73 07       	cpc	r23, r19
 75e:	84 07       	cpc	r24, r20
 760:	ba 07       	cpc	r27, r26
 762:	20 f0       	brcs	.+8      	; 0x76c <__divsf3_pse+0xae>
 764:	62 1b       	sub	r22, r18
 766:	73 0b       	sbc	r23, r19
 768:	84 0b       	sbc	r24, r20
 76a:	ba 0b       	sbc	r27, r26
 76c:	ee 1f       	adc	r30, r30
 76e:	88 f7       	brcc	.-30     	; 0x752 <__divsf3_pse+0x94>
 770:	e0 95       	com	r30
 772:	08 95       	ret

00000774 <__fixsfsi>:
 774:	0e 94 c1 03 	call	0x782	; 0x782 <__fixunssfsi>
 778:	68 94       	set
 77a:	b1 11       	cpse	r27, r1
 77c:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_szero>
 780:	08 95       	ret

00000782 <__fixunssfsi>:
 782:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fp_splitA>
 786:	88 f0       	brcs	.+34     	; 0x7aa <__fixunssfsi+0x28>
 788:	9f 57       	subi	r25, 0x7F	; 127
 78a:	98 f0       	brcs	.+38     	; 0x7b2 <__fixunssfsi+0x30>
 78c:	b9 2f       	mov	r27, r25
 78e:	99 27       	eor	r25, r25
 790:	b7 51       	subi	r27, 0x17	; 23
 792:	b0 f0       	brcs	.+44     	; 0x7c0 <__fixunssfsi+0x3e>
 794:	e1 f0       	breq	.+56     	; 0x7ce <__fixunssfsi+0x4c>
 796:	66 0f       	add	r22, r22
 798:	77 1f       	adc	r23, r23
 79a:	88 1f       	adc	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	1a f0       	brmi	.+6      	; 0x7a6 <__fixunssfsi+0x24>
 7a0:	ba 95       	dec	r27
 7a2:	c9 f7       	brne	.-14     	; 0x796 <__fixunssfsi+0x14>
 7a4:	14 c0       	rjmp	.+40     	; 0x7ce <__fixunssfsi+0x4c>
 7a6:	b1 30       	cpi	r27, 0x01	; 1
 7a8:	91 f0       	breq	.+36     	; 0x7ce <__fixunssfsi+0x4c>
 7aa:	0e 94 77 04 	call	0x8ee	; 0x8ee <__fp_zero>
 7ae:	b1 e0       	ldi	r27, 0x01	; 1
 7b0:	08 95       	ret
 7b2:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__fp_zero>
 7b6:	67 2f       	mov	r22, r23
 7b8:	78 2f       	mov	r23, r24
 7ba:	88 27       	eor	r24, r24
 7bc:	b8 5f       	subi	r27, 0xF8	; 248
 7be:	39 f0       	breq	.+14     	; 0x7ce <__fixunssfsi+0x4c>
 7c0:	b9 3f       	cpi	r27, 0xF9	; 249
 7c2:	cc f3       	brlt	.-14     	; 0x7b6 <__fixunssfsi+0x34>
 7c4:	86 95       	lsr	r24
 7c6:	77 95       	ror	r23
 7c8:	67 95       	ror	r22
 7ca:	b3 95       	inc	r27
 7cc:	d9 f7       	brne	.-10     	; 0x7c4 <__fixunssfsi+0x42>
 7ce:	3e f4       	brtc	.+14     	; 0x7de <__fixunssfsi+0x5c>
 7d0:	90 95       	com	r25
 7d2:	80 95       	com	r24
 7d4:	70 95       	com	r23
 7d6:	61 95       	neg	r22
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	08 95       	ret

000007e0 <__floatunsisf>:
 7e0:	e8 94       	clt
 7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <__floatsisf+0x12>

000007e4 <__floatsisf>:
 7e4:	97 fb       	bst	r25, 7
 7e6:	3e f4       	brtc	.+14     	; 0x7f6 <__floatsisf+0x12>
 7e8:	90 95       	com	r25
 7ea:	80 95       	com	r24
 7ec:	70 95       	com	r23
 7ee:	61 95       	neg	r22
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	99 23       	and	r25, r25
 7f8:	a9 f0       	breq	.+42     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7fa:	f9 2f       	mov	r31, r25
 7fc:	96 e9       	ldi	r25, 0x96	; 150
 7fe:	bb 27       	eor	r27, r27
 800:	93 95       	inc	r25
 802:	f6 95       	lsr	r31
 804:	87 95       	ror	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b7 95       	ror	r27
 80c:	f1 11       	cpse	r31, r1
 80e:	f8 cf       	rjmp	.-16     	; 0x800 <__DATA_REGION_LENGTH__>
 810:	fa f4       	brpl	.+62     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 812:	bb 0f       	add	r27, r27
 814:	11 f4       	brne	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	60 ff       	sbrs	r22, 0
 818:	1b c0       	rjmp	.+54     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 81a:	6f 5f       	subi	r22, 0xFF	; 255
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	16 c0       	rjmp	.+44     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 824:	88 23       	and	r24, r24
 826:	11 f0       	breq	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 828:	96 e9       	ldi	r25, 0x96	; 150
 82a:	11 c0       	rjmp	.+34     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 82c:	77 23       	and	r23, r23
 82e:	21 f0       	breq	.+8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 830:	9e e8       	ldi	r25, 0x8E	; 142
 832:	87 2f       	mov	r24, r23
 834:	76 2f       	mov	r23, r22
 836:	05 c0       	rjmp	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 838:	66 23       	and	r22, r22
 83a:	71 f0       	breq	.+28     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 83c:	96 e8       	ldi	r25, 0x86	; 134
 83e:	86 2f       	mov	r24, r22
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	2a f0       	brmi	.+10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 846:	9a 95       	dec	r25
 848:	66 0f       	add	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	da f7       	brpl	.-10     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 850:	88 0f       	add	r24, r24
 852:	96 95       	lsr	r25
 854:	87 95       	ror	r24
 856:	97 f9       	bld	r25, 7
 858:	08 95       	ret

0000085a <__fp_inf>:
 85a:	97 f9       	bld	r25, 7
 85c:	9f 67       	ori	r25, 0x7F	; 127
 85e:	80 e8       	ldi	r24, 0x80	; 128
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	08 95       	ret

00000866 <__fp_nan>:
 866:	9f ef       	ldi	r25, 0xFF	; 255
 868:	80 ec       	ldi	r24, 0xC0	; 192
 86a:	08 95       	ret

0000086c <__fp_pscA>:
 86c:	00 24       	eor	r0, r0
 86e:	0a 94       	dec	r0
 870:	16 16       	cp	r1, r22
 872:	17 06       	cpc	r1, r23
 874:	18 06       	cpc	r1, r24
 876:	09 06       	cpc	r0, r25
 878:	08 95       	ret

0000087a <__fp_pscB>:
 87a:	00 24       	eor	r0, r0
 87c:	0a 94       	dec	r0
 87e:	12 16       	cp	r1, r18
 880:	13 06       	cpc	r1, r19
 882:	14 06       	cpc	r1, r20
 884:	05 06       	cpc	r0, r21
 886:	08 95       	ret

00000888 <__fp_round>:
 888:	09 2e       	mov	r0, r25
 88a:	03 94       	inc	r0
 88c:	00 0c       	add	r0, r0
 88e:	11 f4       	brne	.+4      	; 0x894 <__fp_round+0xc>
 890:	88 23       	and	r24, r24
 892:	52 f0       	brmi	.+20     	; 0x8a8 <__fp_round+0x20>
 894:	bb 0f       	add	r27, r27
 896:	40 f4       	brcc	.+16     	; 0x8a8 <__fp_round+0x20>
 898:	bf 2b       	or	r27, r31
 89a:	11 f4       	brne	.+4      	; 0x8a0 <__fp_round+0x18>
 89c:	60 ff       	sbrs	r22, 0
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__fp_round+0x20>
 8a0:	6f 5f       	subi	r22, 0xFF	; 255
 8a2:	7f 4f       	sbci	r23, 0xFF	; 255
 8a4:	8f 4f       	sbci	r24, 0xFF	; 255
 8a6:	9f 4f       	sbci	r25, 0xFF	; 255
 8a8:	08 95       	ret

000008aa <__fp_split3>:
 8aa:	57 fd       	sbrc	r21, 7
 8ac:	90 58       	subi	r25, 0x80	; 128
 8ae:	44 0f       	add	r20, r20
 8b0:	55 1f       	adc	r21, r21
 8b2:	59 f0       	breq	.+22     	; 0x8ca <__fp_splitA+0x10>
 8b4:	5f 3f       	cpi	r21, 0xFF	; 255
 8b6:	71 f0       	breq	.+28     	; 0x8d4 <__fp_splitA+0x1a>
 8b8:	47 95       	ror	r20

000008ba <__fp_splitA>:
 8ba:	88 0f       	add	r24, r24
 8bc:	97 fb       	bst	r25, 7
 8be:	99 1f       	adc	r25, r25
 8c0:	61 f0       	breq	.+24     	; 0x8da <__fp_splitA+0x20>
 8c2:	9f 3f       	cpi	r25, 0xFF	; 255
 8c4:	79 f0       	breq	.+30     	; 0x8e4 <__fp_splitA+0x2a>
 8c6:	87 95       	ror	r24
 8c8:	08 95       	ret
 8ca:	12 16       	cp	r1, r18
 8cc:	13 06       	cpc	r1, r19
 8ce:	14 06       	cpc	r1, r20
 8d0:	55 1f       	adc	r21, r21
 8d2:	f2 cf       	rjmp	.-28     	; 0x8b8 <__fp_split3+0xe>
 8d4:	46 95       	lsr	r20
 8d6:	f1 df       	rcall	.-30     	; 0x8ba <__fp_splitA>
 8d8:	08 c0       	rjmp	.+16     	; 0x8ea <__fp_splitA+0x30>
 8da:	16 16       	cp	r1, r22
 8dc:	17 06       	cpc	r1, r23
 8de:	18 06       	cpc	r1, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	f1 cf       	rjmp	.-30     	; 0x8c6 <__fp_splitA+0xc>
 8e4:	86 95       	lsr	r24
 8e6:	71 05       	cpc	r23, r1
 8e8:	61 05       	cpc	r22, r1
 8ea:	08 94       	sec
 8ec:	08 95       	ret

000008ee <__fp_zero>:
 8ee:	e8 94       	clt

000008f0 <__fp_szero>:
 8f0:	bb 27       	eor	r27, r27
 8f2:	66 27       	eor	r22, r22
 8f4:	77 27       	eor	r23, r23
 8f6:	cb 01       	movw	r24, r22
 8f8:	97 f9       	bld	r25, 7
 8fa:	08 95       	ret

000008fc <__mulsf3>:
 8fc:	0e 94 91 04 	call	0x922	; 0x922 <__mulsf3x>
 900:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_round>
 904:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscA>
 908:	38 f0       	brcs	.+14     	; 0x918 <__stack+0x19>
 90a:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscB>
 90e:	20 f0       	brcs	.+8      	; 0x918 <__stack+0x19>
 910:	95 23       	and	r25, r21
 912:	11 f0       	breq	.+4      	; 0x918 <__stack+0x19>
 914:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_inf>
 918:	0c 94 33 04 	jmp	0x866	; 0x866 <__fp_nan>
 91c:	11 24       	eor	r1, r1
 91e:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_szero>

00000922 <__mulsf3x>:
 922:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_split3>
 926:	70 f3       	brcs	.-36     	; 0x904 <__stack+0x5>

00000928 <__mulsf3_pse>:
 928:	95 9f       	mul	r25, r21
 92a:	c1 f3       	breq	.-16     	; 0x91c <__stack+0x1d>
 92c:	95 0f       	add	r25, r21
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	55 1f       	adc	r21, r21
 932:	62 9f       	mul	r22, r18
 934:	f0 01       	movw	r30, r0
 936:	72 9f       	mul	r23, r18
 938:	bb 27       	eor	r27, r27
 93a:	f0 0d       	add	r31, r0
 93c:	b1 1d       	adc	r27, r1
 93e:	63 9f       	mul	r22, r19
 940:	aa 27       	eor	r26, r26
 942:	f0 0d       	add	r31, r0
 944:	b1 1d       	adc	r27, r1
 946:	aa 1f       	adc	r26, r26
 948:	64 9f       	mul	r22, r20
 94a:	66 27       	eor	r22, r22
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	66 1f       	adc	r22, r22
 952:	82 9f       	mul	r24, r18
 954:	22 27       	eor	r18, r18
 956:	b0 0d       	add	r27, r0
 958:	a1 1d       	adc	r26, r1
 95a:	62 1f       	adc	r22, r18
 95c:	73 9f       	mul	r23, r19
 95e:	b0 0d       	add	r27, r0
 960:	a1 1d       	adc	r26, r1
 962:	62 1f       	adc	r22, r18
 964:	83 9f       	mul	r24, r19
 966:	a0 0d       	add	r26, r0
 968:	61 1d       	adc	r22, r1
 96a:	22 1f       	adc	r18, r18
 96c:	74 9f       	mul	r23, r20
 96e:	33 27       	eor	r19, r19
 970:	a0 0d       	add	r26, r0
 972:	61 1d       	adc	r22, r1
 974:	23 1f       	adc	r18, r19
 976:	84 9f       	mul	r24, r20
 978:	60 0d       	add	r22, r0
 97a:	21 1d       	adc	r18, r1
 97c:	82 2f       	mov	r24, r18
 97e:	76 2f       	mov	r23, r22
 980:	6a 2f       	mov	r22, r26
 982:	11 24       	eor	r1, r1
 984:	9f 57       	subi	r25, 0x7F	; 127
 986:	50 40       	sbci	r21, 0x00	; 0
 988:	9a f0       	brmi	.+38     	; 0x9b0 <__mulsf3_pse+0x88>
 98a:	f1 f0       	breq	.+60     	; 0x9c8 <__mulsf3_pse+0xa0>
 98c:	88 23       	and	r24, r24
 98e:	4a f0       	brmi	.+18     	; 0x9a2 <__mulsf3_pse+0x7a>
 990:	ee 0f       	add	r30, r30
 992:	ff 1f       	adc	r31, r31
 994:	bb 1f       	adc	r27, r27
 996:	66 1f       	adc	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	91 50       	subi	r25, 0x01	; 1
 99e:	50 40       	sbci	r21, 0x00	; 0
 9a0:	a9 f7       	brne	.-22     	; 0x98c <__mulsf3_pse+0x64>
 9a2:	9e 3f       	cpi	r25, 0xFE	; 254
 9a4:	51 05       	cpc	r21, r1
 9a6:	80 f0       	brcs	.+32     	; 0x9c8 <__mulsf3_pse+0xa0>
 9a8:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_inf>
 9ac:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_szero>
 9b0:	5f 3f       	cpi	r21, 0xFF	; 255
 9b2:	e4 f3       	brlt	.-8      	; 0x9ac <__mulsf3_pse+0x84>
 9b4:	98 3e       	cpi	r25, 0xE8	; 232
 9b6:	d4 f3       	brlt	.-12     	; 0x9ac <__mulsf3_pse+0x84>
 9b8:	86 95       	lsr	r24
 9ba:	77 95       	ror	r23
 9bc:	67 95       	ror	r22
 9be:	b7 95       	ror	r27
 9c0:	f7 95       	ror	r31
 9c2:	e7 95       	ror	r30
 9c4:	9f 5f       	subi	r25, 0xFF	; 255
 9c6:	c1 f7       	brne	.-16     	; 0x9b8 <__mulsf3_pse+0x90>
 9c8:	fe 2b       	or	r31, r30
 9ca:	88 0f       	add	r24, r24
 9cc:	91 1d       	adc	r25, r1
 9ce:	96 95       	lsr	r25
 9d0:	87 95       	ror	r24
 9d2:	97 f9       	bld	r25, 7
 9d4:	08 95       	ret

000009d6 <round>:
 9d6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fp_splitA>
 9da:	e8 f0       	brcs	.+58     	; 0xa16 <round+0x40>
 9dc:	9e 37       	cpi	r25, 0x7E	; 126
 9de:	e8 f0       	brcs	.+58     	; 0xa1a <round+0x44>
 9e0:	96 39       	cpi	r25, 0x96	; 150
 9e2:	b8 f4       	brcc	.+46     	; 0xa12 <round+0x3c>
 9e4:	9e 38       	cpi	r25, 0x8E	; 142
 9e6:	48 f4       	brcc	.+18     	; 0x9fa <round+0x24>
 9e8:	67 2f       	mov	r22, r23
 9ea:	78 2f       	mov	r23, r24
 9ec:	88 27       	eor	r24, r24
 9ee:	98 5f       	subi	r25, 0xF8	; 248
 9f0:	f9 cf       	rjmp	.-14     	; 0x9e4 <round+0xe>
 9f2:	86 95       	lsr	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	93 95       	inc	r25
 9fa:	95 39       	cpi	r25, 0x95	; 149
 9fc:	d0 f3       	brcs	.-12     	; 0x9f2 <round+0x1c>
 9fe:	b6 2f       	mov	r27, r22
 a00:	b1 70       	andi	r27, 0x01	; 1
 a02:	6b 0f       	add	r22, r27
 a04:	71 1d       	adc	r23, r1
 a06:	81 1d       	adc	r24, r1
 a08:	20 f4       	brcc	.+8      	; 0xa12 <round+0x3c>
 a0a:	87 95       	ror	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	93 95       	inc	r25
 a12:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_mintl>
 a16:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_mpack>
 a1a:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_szero>

00000a1e <__fp_mintl>:
 a1e:	88 23       	and	r24, r24
 a20:	71 f4       	brne	.+28     	; 0xa3e <__fp_mintl+0x20>
 a22:	77 23       	and	r23, r23
 a24:	21 f0       	breq	.+8      	; 0xa2e <__fp_mintl+0x10>
 a26:	98 50       	subi	r25, 0x08	; 8
 a28:	87 2b       	or	r24, r23
 a2a:	76 2f       	mov	r23, r22
 a2c:	07 c0       	rjmp	.+14     	; 0xa3c <__fp_mintl+0x1e>
 a2e:	66 23       	and	r22, r22
 a30:	11 f4       	brne	.+4      	; 0xa36 <__fp_mintl+0x18>
 a32:	99 27       	eor	r25, r25
 a34:	0d c0       	rjmp	.+26     	; 0xa50 <__fp_mintl+0x32>
 a36:	90 51       	subi	r25, 0x10	; 16
 a38:	86 2b       	or	r24, r22
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	60 e0       	ldi	r22, 0x00	; 0
 a3e:	2a f0       	brmi	.+10     	; 0xa4a <__fp_mintl+0x2c>
 a40:	9a 95       	dec	r25
 a42:	66 0f       	add	r22, r22
 a44:	77 1f       	adc	r23, r23
 a46:	88 1f       	adc	r24, r24
 a48:	da f7       	brpl	.-10     	; 0xa40 <__fp_mintl+0x22>
 a4a:	88 0f       	add	r24, r24
 a4c:	96 95       	lsr	r25
 a4e:	87 95       	ror	r24
 a50:	97 f9       	bld	r25, 7
 a52:	08 95       	ret

00000a54 <__fp_mpack>:
 a54:	9f 3f       	cpi	r25, 0xFF	; 255
 a56:	31 f0       	breq	.+12     	; 0xa64 <__fp_mpack_finite+0xc>

00000a58 <__fp_mpack_finite>:
 a58:	91 50       	subi	r25, 0x01	; 1
 a5a:	20 f4       	brcc	.+8      	; 0xa64 <__fp_mpack_finite+0xc>
 a5c:	87 95       	ror	r24
 a5e:	77 95       	ror	r23
 a60:	67 95       	ror	r22
 a62:	b7 95       	ror	r27
 a64:	88 0f       	add	r24, r24
 a66:	91 1d       	adc	r25, r1
 a68:	96 95       	lsr	r25
 a6a:	87 95       	ror	r24
 a6c:	97 f9       	bld	r25, 7
 a6e:	08 95       	ret

00000a70 <__udivmodsi4>:
 a70:	a1 e2       	ldi	r26, 0x21	; 33
 a72:	1a 2e       	mov	r1, r26
 a74:	aa 1b       	sub	r26, r26
 a76:	bb 1b       	sub	r27, r27
 a78:	fd 01       	movw	r30, r26
 a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__udivmodsi4_ep>

00000a7c <__udivmodsi4_loop>:
 a7c:	aa 1f       	adc	r26, r26
 a7e:	bb 1f       	adc	r27, r27
 a80:	ee 1f       	adc	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	a2 17       	cp	r26, r18
 a86:	b3 07       	cpc	r27, r19
 a88:	e4 07       	cpc	r30, r20
 a8a:	f5 07       	cpc	r31, r21
 a8c:	20 f0       	brcs	.+8      	; 0xa96 <__udivmodsi4_ep>
 a8e:	a2 1b       	sub	r26, r18
 a90:	b3 0b       	sbc	r27, r19
 a92:	e4 0b       	sbc	r30, r20
 a94:	f5 0b       	sbc	r31, r21

00000a96 <__udivmodsi4_ep>:
 a96:	66 1f       	adc	r22, r22
 a98:	77 1f       	adc	r23, r23
 a9a:	88 1f       	adc	r24, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	1a 94       	dec	r1
 aa0:	69 f7       	brne	.-38     	; 0xa7c <__udivmodsi4_loop>
 aa2:	60 95       	com	r22
 aa4:	70 95       	com	r23
 aa6:	80 95       	com	r24
 aa8:	90 95       	com	r25
 aaa:	9b 01       	movw	r18, r22
 aac:	ac 01       	movw	r20, r24
 aae:	bd 01       	movw	r22, r26
 ab0:	cf 01       	movw	r24, r30
 ab2:	08 95       	ret

00000ab4 <_exit>:
 ab4:	f8 94       	cli

00000ab6 <__stop_program>:
 ab6:	ff cf       	rjmp	.-2      	; 0xab6 <__stop_program>
